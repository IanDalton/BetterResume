name: Deploy Backend (FastAPI) to Homelab via SSH

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy via SSH (Docker build & run)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOMELAB_HOST }}
          username: ${{ secrets.HOMELAB_USERNAME }}
          key: ${{ secrets.HOMELAB_SSH_KEY }}
          # If you later add secrets for API keys or Docker Hub credentials, expose them via 'envs:' list and step env mapping above.
          script: |
            set -euo pipefail

            REPO_DIR="$HOME/repos/BetterResume"
            GIT_REPO="https://ibalton:${{ secrets.GITHUB_TOKEN }}@github.com/IanDalton/BetterResume.git"
            APP_NAME="better-resume-backend"
            CONTAINER_NAME="better-resume"
            DATA_VOLUME="better_resume_data"
            BACKEND_DIR="$REPO_DIR/backend"

            echo "== Ensure repo present =="
            if [ ! -d "$REPO_DIR/.git" ]; then
              mkdir -p "$REPO_DIR"
              git clone "$GIT_REPO" "$REPO_DIR"
            fi
            cd "$REPO_DIR"
            git fetch origin main
            git reset --hard origin/main
            git clean -fd

            echo "== Create/refresh .env from secrets =="
            # Only overwrite if we have any backend related secrets exposed; append safely.
            ENV_FILE="$BACKEND_DIR/.env"
            echo "# Auto-generated by GitHub Action $(date -u)" > "$ENV_FILE"
            echo "DATA_DIR=/app/data" >> "$ENV_FILE"
            # Append secrets here manually on server or enhance workflow to inject them.

            echo "== Docker login (optional) =="
            # Docker Hub login (optional): add credentials via secrets + envs if needed.

            echo "== Build image =="
            docker build -t "$APP_NAME" "$BACKEND_DIR"

            echo "== Create data volume if missing =="
            docker volume inspect "$DATA_VOLUME" >/dev/null 2>&1 || docker volume create "$DATA_VOLUME"

            echo "== Stop & remove old container =="
            docker rm -f "$CONTAINER_NAME" >/dev/null 2>&1 || true

            echo "== Run new container =="
            docker run -d \
              --name "$CONTAINER_NAME" \
              --restart unless-stopped \
              -p 8000:8000 \
              --env-file "$ENV_FILE" \
              -v "$DATA_VOLUME":/app/data \
              "$APP_NAME"

            echo "== Prune dangling images (safe) =="
            docker image prune -f >/dev/null 2>&1 || true

            echo "Deployment complete. Container status:"
            docker ps --filter name="$CONTAINER_NAME"

